#+title: Explain Filters Std Mean
#+startup: latexpreview fold
#+EXPORT_EXCLUDE_TAGS: noexport
#+EXCLUDE_TAGS: noexport
#+TAGS:  noexport(n)

* standard deviation

Pretty much self explanatory...
#+begin_src jupyter-python :results raw drawer :exports code
from data import *
import numpy as np
import matplotlib.pyplot as plt
from scipy.signal import butter, tf2sos, sosfilt, firwin
noise_on_std = np.std(noise_chan.data)
clean_off_std = np.std(clean_chan_off_0)


fir_filt_coeff = firwin(numtaps=22,
                        fs=fs_noise,
                        cutoff=200,
                        )
sos_fir_mode = tf2sos(fir_filt_coeff, 1)
filt_on_fir_std = sosfilt(sos_fir_mode, noise_chan.data)


b, a = butter(2,
              200,   # This is in Hz !!!!
              # [min(noise_frequencies[L]), max(noise_frequencies[L]-1)],
              btype="low", fs=fs_noise)

# Apply filter
sos_out = tf2sos(b, a)
filtered_signal = sosfilt(sos_out, noise_chan.data)
filt_on_iir_std = np.std(filtered_signal)
# function to add value labels

# Bar graph:
#       Adding the comparison for standard deviation to backup my filter
#       strategy.
x_axis = ['Inverter Off', 'Inverter On',
          'Filtered IIR On \n(order 2)', 'Filtered FIR On \n(order 22)']
y_axis = [clean_off_std, noise_on_std, filt_on_iir_std, np.std(filt_on_fir_std)]
labels = ["raw", "raw", "order 2", "order 22"]

plt.title("Comparison for Wind Tunnel measurements and inverter On and Off")
plt.xlabel("O m/s airflow")
plt.ylabel("standard deviation")
plt.bar(x_axis, y_axis)
# plt.show()
# plt.savefig("./std.png", bbox_inches="tight")

#+end_src

#+RESULTS:
:results:
# [goto error]
#+begin_example
[0;31m---------------------------------------------------------------------------[0m
[0;31mNameError[0m                                 Traceback (most recent call last)
Cell [0;32mIn[1], line 6[0m
[1;32m      4[0m [38;5;28;01mfrom[39;00m [38;5;21;01mscipy[39;00m[38;5;21;01m.[39;00m[38;5;21;01msignal[39;00m [38;5;28;01mimport[39;00m butter, tf2sos, sosfilt, firwin
[1;32m      5[0m noise_on_std [38;5;241m=[39m np[38;5;241m.[39mstd(noise_chan[38;5;241m.[39mdata)
[0;32m----> 6[0m clean_off_std [38;5;241m=[39m np[38;5;241m.[39mstd([43mclean_chan_off_0[49m)
[1;32m      9[0m fir_filt_coeff [38;5;241m=[39m firwin(numtaps[38;5;241m=[39m[38;5;241m22[39m,
[1;32m     10[0m                         fs[38;5;241m=[39mfs_noise,
[1;32m     11[0m                         cutoff[38;5;241m=[39m[38;5;241m200[39m,
[1;32m     12[0m                         )
[1;32m     13[0m sos_fir_mode [38;5;241m=[39m tf2sos(fir_filt_coeff, [38;5;241m1[39m)

[0;31mNameError[0m: name 'clean_chan_off_0' is not defined
#+end_example
:end:

[[file:./std.png]]
* Whisker plot for mean value comparison
** info :noexport:
The documentation says:
#+begin_example

          Q2-1.5IQR   Q1   median  Q3   Q3+1.5IQR
                       |-----:-----|
       o      |--------|     :     |--------|  o  o
                       |-----:-----|
   lier                <----------->          fliers
                            IQR
#+end_example
** usefull info from matplotlib

- autorangebool, default: False
  When True and the data are distributed such that the 25th and 75th
  percentiles are equal, whis is set to (0, 100) such that the whisker ends
  are at the minimum and maximum of the data.

*reference* :
    - https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.boxplot.html
** plot
#+begin_src jupyter-python :results raw drawer :exports code
# %%
"""
          Q2-1.5IQR   Q1   median  Q3   Q3+1.5IQR
                       |-----:-----|
       o      |--------|     :     |--------|  o  o
                       |-----:-----|
   lier                <----------->          fliers
                            IQR
"""
labels = ["Inverter Off",
          "Inverter On",
          "Butterworth\nlow-pass\nat 200Hz(IIR)",
          "Simple window\nlow-pass\nat 200Hz(FIR)"]

plt.boxplot([clean_chan_off_0, noise_chan, filtered_signal, filt_on_fir_std],
            labels=labels,
            # notch=True,
            vert=True,
            patch_artist=False,
            meanline=True,
            showmeans=True,
            autorange=True,
            showfliers=False
            )
plt.title("Wind Tunnel measurements with airflow O m/s")
plt.xlabel("Filtering technics")
plt.ylabel("Mean value of recorded signal")
# plt.ylim(1.52, 1.72)
# plt.show()
plt.savefig("./whiskr.png", bbox_inches="tight")
#+end_src

#+RESULTS:
:results:
[[file:./.ob-jupyter/64e7a82649644a3e29e958cac85f18a16177f84b.png]]
:end:


[[file:./whiskr.png]]
