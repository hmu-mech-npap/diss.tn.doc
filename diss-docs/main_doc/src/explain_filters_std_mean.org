#+title: Explain Filters Std Mean
#+startup: latexpreview fold

* standard deviation

Pretty much self explanatory...
```python
#+begin_src jupyter-python :results raw drawer :exports code
from data import *
import numpy as np
import matplotlib.pyplot as plt
from scipy.signal import butter, tf2sos, sosfilt, firwin
noise_on_std = np.std(noise_chan.data)
clean_off_std = np.std(clean_chan_off_0)


fir_filt_coeff = firwin(numtaps=22,
                        fs=fs_noise,
                        cutoff=200,
                        )
sos_fir_mode = tf2sos(fir_filt_coeff, 1)
filt_on_fir_std = sosfilt(sos_fir_mode, noise_chan.data)


b, a = butter(2,
              200,   # This is in Hz !!!!
              # [min(noise_frequencies[L]), max(noise_frequencies[L]-1)],
              btype="low", fs=fs_noise)

# Apply filter
sos_out = tf2sos(b, a)
filtered_signal = sosfilt(sos_out, noise_chan.data)
filt_on_iir_std = np.std(filtered_signal)
# function to add value labels

# Bar graph:
#       Adding the comparison for standard deviation to backup my filter
#       strategy.
x_axis = ['Inverter Off', 'Inverter On',
          'Filtered IIR On \n(order 2)', 'Filtered FIR On \n(order 22)']
y_axis = [clean_off_std, noise_on_std, filt_on_iir_std, np.std(filt_on_fir_std)]
labels = ["raw", "raw", "order 2", "order 22"]

plt.title("Comparison for Wind Tunnel measurements and inverter On and Off")
plt.xlabel("O m/s airflow")
plt.ylabel("standard deviation")
plt.bar(x_axis, y_axis)
# plt.show()
plt.savefig("./std.png", bbox_inches="tight")

#+end_src

#+RESULTS:
:results:
[[file:./.ob-jupyter/ed2eb4b7181d70a7205da09683be974ed72d4ff2.png]]
:end:
```

[[file:./std.png]]
* Whisker plot for mean value comparison
The documentation says:
```python
"""
#          Q2-1.5IQR   Q1   median  Q3   Q3+1.5IQR
#                       |-----:-----|
#       o      |--------|     :     |--------|  o  o
#                       |-----:-----|
#   lier                <----------->          fliers
#                            IQR
"""
```
- autorangebool, default: False
    When True and the data are distributed such that the 25th and 75th
    percentiles are equal, whis is set to (0, 100) such that the whisker ends
    are at the minimum and maximum of the data.

*reference* :
    - https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.boxplot.html

```python
#+begin_src jupyter-python :results raw drawer :exports code
# %%
""""""
labels = ["Inverter Off",
          "Inverter On",
          "Butterworth\nlow-pass\nat 200Hz(IIR)",
          "Simple window\nlow-pass\nat 200Hz(FIR)"]

plt.boxplot([clean_chan_off_0, noise_chan, filtered_signal, filt_on_fir_std],
            labels=labels,
            # notch=True,
            vert=True,
            patch_artist=False,
            meanline=True,
            showmeans=True,
            autorange=True,
            showfliers=False
            )
plt.title("Wind Tunnel measurements with airflow O m/s")
plt.xlabel("Filtering technics")
plt.ylabel("Mean value of recorded signal")
# plt.ylim(1.52, 1.72)
# plt.show()
plt.savefig("./whiskr.png", bbox_inches="tight")
#+end_src
```

#+RESULTS:
:results:
[[file:./.ob-jupyter/64e7a82649644a3e29e958cac85f18a16177f84b.png]]
:end:


[[file:./whiskr.png]]
